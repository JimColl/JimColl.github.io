<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jim Coll</title>
    <link>https://jimcoll.github.io/courses/random/</link>
      <atom:link href="https://jimcoll.github.io/courses/random/index.xml" rel="self" type="application/rss+xml" />
    <description>Jim Coll</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language>
    <image>
      <url>https://jimcoll.github.io/img/icon-192.png</url>
      <title>Jim Coll</title>
      <link>https://jimcoll.github.io/courses/random/</link>
    </image>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/website/</guid>
      <description>

&lt;h1 id=&#34;creating-a-website&#34;&gt;&lt;strong&gt;Creating a website:&lt;/strong&gt;&lt;/h1&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;There are a lot of links in here, to highlight some key resources I used while I was learning how to do this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-www&#34;&gt;https://github.com/sourcethemes/academic-www&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic&#34;&gt;https://github.com/gcushen/hugo-academic&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also several other tutorial linked at the end of this page that may be of use.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The creation of this website was spurred by a desire to streamline my digital footprint and more easily facilitate sharing of resources (Google Drive simply doesn&amp;rsquo;t cut it here, and OneDrive is a whole different beast).  However, building a website of your own is not as straightforward or accessible as it otherwise could be.  Somehow among the vast sea of ways to design and host a website, I found workable solution in the form of the HUGO.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;HUGO&lt;/a&gt;, a variation of the GO programming language, is touted as ‚ÄúThe world‚Äôs fastest framework for building websites‚Äù.  The HUGO documentation, particularly the &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;hosting on github page&lt;/a&gt;, is a great place to start and is the ‚Äúcorrect‚Äù way to go about creating a site.  Below I will walk through how I managed to get it to work, your mileage may vary.  &lt;strong&gt;I also recommend following the &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34;&gt;Academic theme instructions&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A cautionary note:&lt;br /&gt;
Your site doesn‚Äôt have to look like mine, feel free to pick any off the &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;themes page&lt;/a&gt;.  The theme you choose will do most of the heavy lifting, and hopefully you find one that does everything you want it to.  If not, be prepared to spend a few days figuring out how HUGO and the themes work; there is no shortcut to creating new site behavior and I found it to be a bit unforgiving at times.  In short, unless you REALLY want to sink time into this skillset, pick a theme and be happy with it üòä
  &lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&#34;step-by-step-instructions&#34;&gt;&amp;ldquo;Step by step&amp;rdquo; instructions&lt;/h1&gt;

&lt;h2 id=&#34;create-a-github-account&#34;&gt;&lt;strong&gt;Create a github account:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Create a &lt;a href=&#34;https://github.com/&#34;&gt;Github account&lt;/a&gt;.  I suppose in an ideal world your website name would be the same as your github Username, but these can mismatch.  I believe a free user account is restricted to one web page per account, and I haven‚Äôt bothered to test that limit.&lt;/p&gt;

&lt;h2 id=&#34;install-git-for-windows&#34;&gt;&lt;strong&gt;Install git for windows:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Follow download and installation instructions at &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;https://gitforwindows.org/&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-website-url-repository&#34;&gt;&lt;strong&gt;Create the website url repository:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It is possible to buy a domain so that you can customize your url, but in my case I‚Äôm cheap, and jimcoll.github.io is perfectly fine with me.  Note that here I deviate from the HUGO docs.  I don&amp;rsquo;t use github the right way, and I don&amp;rsquo;t really have a reason to use another github repository to keep the site files, as you&amp;rsquo;ll see below I just keep them on OneDrive and kept on my local hard drive.&lt;/p&gt;

&lt;h2 id=&#34;create-a-website-folder&#34;&gt;&lt;strong&gt;Create a website folder:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Next we need to create a folder where our website will live.  This folder ideally shouldn‚Äôt be moved after you‚Äôve created it, so place it somewhere useful (read: not the desktop).  I gave into our digital overlords and moved most of my footprint to the cloud (OneDrive), so on my root folder I created a folder called myWebsite.  Then I like to right click on the folder and select the ‚ÄúAlways keep it on this device‚Äù.&lt;/p&gt;

&lt;h2 id=&#34;installing-hugo&#34;&gt;&lt;strong&gt;Installing HUGO:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Next you need to install HUGO in the website directory.  Download the appropriate windows install from the HUGO releases (&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;).  Unzip the file and place the hugo.exe file into your myWebsite folder.&lt;/p&gt;

&lt;h2 id=&#34;create-the-website&#34;&gt;&lt;strong&gt;Create the website:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This is where you need to start thinking for yourself.  This process varies depending on which theme you end up choosing.  Here I‚Äôll just point you to the &lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34;&gt;Academic doc pages&lt;/a&gt;.  The &lt;a href=&#34;https://github.com/sourcethemes/academic-www/tree/master/content/en/docs&#34;&gt;raw doc files&lt;/a&gt; are also useful for formatting guidance.&lt;/p&gt;

&lt;h2 id=&#34;updating-your-website&#34;&gt;&lt;strong&gt;Updating your website:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;When you want to &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;&amp;ldquo;manage your content&amp;rdquo;&lt;/a&gt;, it‚Äôs easiest to test it locally first.  Shift-right click in the myWebsite folder and ‚ÄúOpen PowerShell window here‚Äù.  Then, type &lt;code&gt;.\hugo server --disableFastRender&lt;/code&gt;.  You can then open a browser and go to &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;.  At this point, any changes made to your site will automagically change.  When you are happy with your changes, you generate your site from within PowerShell with the &lt;code&gt;.\hugo&lt;/code&gt; command.  This repopulates the public folder.  The last step is to push your new changes up to the repository, which you can do by right clicking in the public folder and selecting Git GUI Here, then&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stage Changed files&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;create a commit message&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Commit the changes, and&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Push the changes up to the repository.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/GitPushCommands.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;how-this-site-was-created&#34;&gt;&lt;strong&gt;How this site was created:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This site is a smashup of the &lt;a href=&#34;https://github.com/darshanbaral/aafu&#34;&gt;aafu&lt;/a&gt; and Academic themes.  Although the Academic theme has just about every feature you might need, I fell in love with the AAFU theme and the accordion effect and was too enthralled not to try and integrate.  To do this, you need to understand a little about how HUGO creates a website.  HUGO uses a tiered folder system to generate the site, and will look in folders following a defined &lt;a href=&#34;https://gohugo.io/templates/lookup-order/&#34;&gt;lookup order&lt;/a&gt;.  Therefore, we need to overwrite the academic home page theme with the aafu theme.  To do this, I first install the Academic theme, and then replace the partials folder with the aafu theme.  The last step is to reconfigure the &lt;i&gt;config/_default/&lt;/i&gt; folder with the aafu theme markdown files.  Most of these are straightforward, but within the &lt;i&gt;config/_default/config.toml&lt;/i&gt;, we need to set the theme order as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Configuration of Academic
# Documentation: https://sourcethemes.com/academic/
#
# This file is formatted using TOML syntax - learn more at https://learnxinyminutes.com/docs/toml/
# Each configuration section is defined by a name in square brackets (e.g. `[outputs]`).

# Title of your site
title = &amp;quot;Jim Coll&amp;quot;

# The URL of your site.
# End your URL with a `/` trailing slash, e.g. `https://example.com/`.
baseurl = &amp;quot;https://jimcoll.github.io/&amp;quot;

# Enter a copyright notice to display in the site footer.
# To display a copyright symbol, type `&amp;amp;copy;`. For current year, type `{year}`.
copyright = &amp;quot;&amp;quot;

# Enable analytics by entering your Google Analytics tracking ID
googleAnalytics = &amp;quot;&amp;quot;

############################
## Advanced options below ##
############################

# Name of Academic theme folder in `themes/`.
theme = [&amp;quot;academic&amp;quot;, &amp;quot;aafu&amp;quot;]

defaultContentLanguageInSubdir = false
removePathAccents = true  # Workaround for https://github.com/gohugoio/hugo/issues/5687
# Get user avatars from Gravatar.com? (true/false)
gravatar = false

# Align the main menu to the right of the page? (true/false)
menu_align_right = false

# Show estimated reading time for posts? (true/false)
reading_time = true

# Display next/previous section pager? (true/false)
section_pager = false
docs_section_pager = true  # Display pager in Docs layout (e.g. tutorials)?

# Enable in-built social sharing buttons? (true/false)
sharing = true
paginate = 10  # Number of items per page in paginated lists.
# Taxonomies.
[taxonomies]
  tag = &amp;quot;tags&amp;quot;
  category = &amp;quot;categories&amp;quot;
  publication_type = &amp;quot;publication_types&amp;quot;
  author = &amp;quot;authors&amp;quot;

[params]
    title = &amp;quot;Jim Coll&amp;quot;
    author = &amp;quot;Darshan Baral&amp;quot;
    description = &amp;quot;Jim Coll&amp;quot;
    copyright = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The rest of that file is the remains of the aafu theme.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;adding-classes&#34;&gt;&lt;strong&gt;Adding classes&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;To get menus to work, my &lt;i&gt;/config/_default/menus.toml&lt;/i&gt; file looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# Navigation Links
#   To link a homepage widget, specify the URL as a hash `#` followed by the filename of the
#     desired widget in your `content/home/` folder.
#   The weight parameter defines the order that the links will appear in.
[[main]]
  name = &amp;quot;Main Website&amp;quot;
  url = &amp;quot;&amp;quot;
  weight = 1
[[main]]
  name = &amp;quot;GEOG 358&amp;quot;
  url = &amp;quot;/courses/geog358/&amp;quot;
  weight = 2
[[main]]
  name = &amp;quot;GEOG 558&amp;quot;
  url = &amp;quot;/courses/geog558/&amp;quot;
  weight = 3
[[main]]
  name = &amp;quot;Drone Mapping&amp;quot;
  url = &amp;quot;/courses/dronemapping/&amp;quot;
  weight = 4
[[main]]
  name = &amp;quot;Random&amp;quot;
  url = &amp;quot;/courses/random/&amp;quot;
  weight = 4
  
[[geog358]]
  url = &amp;quot;/courses/geog358&amp;quot;
[[geog558]]
  url = &amp;quot;/courses/geog558&amp;quot;
[[random]]
  url = &amp;quot;/courses/random&amp;quot;
[[dronemapping]]
  url = &amp;quot;/courses/dronemapping&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;make-it-your-own&#34;&gt;&lt;strong&gt;Make it your own&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;One of the best ways I&amp;rsquo;ve found to help improve my understanding of the software/deployment was to change some of the layouts.  To add your resume to your image card as a link, and not as an icon as I have, you need to tweak the footer of the aafu theme, which should be in the &lt;i&gt;themes\academic\layouts\partials\footer.html&lt;/i&gt;.  Mine now looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;&amp;lt;footer class=&amp;quot;mb-4&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;https://jimcoll.github.io/courses/random/media/JamesCollSharedWebResume.docx&amp;quot;&amp;gt;Download a &amp;quot;more traditional&amp;quot; resume
  &amp;lt;/a&amp;gt;
  &amp;lt;/br&amp;gt;
  powered by &amp;lt;a href=&amp;quot;https://gohugo.io/&amp;quot;&amp;gt;hugo&amp;lt;/a&amp;gt; &amp;amp; deployed on &amp;lt;a href=&amp;quot;https://github.com/&amp;quot;&amp;gt;github&amp;lt;/a&amp;gt;
  &amp;amp;middot;
  &amp;lt;i&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/darshanbaral/aafu&amp;quot;&amp;gt;aafu&amp;lt;/a&amp;gt;&amp;lt;/i&amp;gt; by &amp;lt;a href=&amp;quot;https://www.darshanbaral.com/&amp;quot;&amp;gt;Darshan&amp;lt;/a&amp;gt;
  &amp;amp; 
  &amp;lt;i&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/gcushen/hugo-academic&amp;quot;&amp;gt;Academic&amp;lt;/a&amp;gt;&amp;lt;/i&amp;gt; by &amp;lt;a href=&amp;quot;https://georgecushen.com/&amp;quot;&amp;gt;George&amp;lt;/a&amp;gt;
&amp;lt;/footer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;website-width&#34;&gt;&lt;strong&gt;Website width&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Academic theme follows the &amp;ldquo;best&amp;rdquo; practice of a mobile first design, and therefore scales pages to an otherwise anemic width.  This is functional, but I was unhappy with it.  Following tips on &lt;a href=&#34;https://discourse.gohugo.io/t/how-can-i-increase-the-width-of-huco-academic-content/14952&#34;&gt;this post&lt;/a&gt;, you can change the head of the file at &lt;i&gt;themes\academic\assets\sass\academic_docs.scss&lt;/i&gt; to a larger max width.  A small bump is all you need to make it look prettier (960 is about 12 point font on a word document, 1440 is also a solid choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*************************************************
 *  Documentation layout
 **************************************************/

.docs-article-container {
  max-width: 960px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;adding-tabbed-content&#34;&gt;&lt;strong&gt;Adding tabbed content&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Below is a code snipit that shows how to lay out material within a tabbed content box.  Of note, in order to mix markdown into html elements, we need to append markdown=&amp;ldquo;1&amp;rdquo; to each div element, and DIV needs to be capitalized in order for this to render properly.  I prefer removing indentations here, it makes writing the raw content easier and doesn&amp;rsquo;t break formatting on Chrome (other browsers untested).  The &lt;code&gt;&amp;amp;nbsp;&lt;/code&gt; in the headers are added for spacing.  Unfortunately, having headers above level 4 within tabbed boxes breaks the page table of contents on the right hand side and so should be avoided if possible.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul class=&amp;quot;nav nav-tabs&amp;quot;&amp;gt;
&amp;lt;li class=&amp;quot;active&amp;quot;&amp;gt;&amp;lt;a data-toggle=&amp;quot;tab&amp;quot; href=&amp;quot;#home&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;Home&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a data-toggle=&amp;quot;tab&amp;quot; href=&amp;quot;#menu1&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;Menu 1&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a data-toggle=&amp;quot;tab&amp;quot; href=&amp;quot;#menu2&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;Menu 2&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;DIV class=&amp;quot;tab-content&amp;quot; markdown=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;DIV id=&amp;quot;home&amp;quot; class=&amp;quot;tab-pane fade show active&amp;quot; markdown=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;h3&amp;gt;HOME tab is shown by default&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Some content.&amp;lt;/p&amp;gt;
&amp;lt;/DIV&amp;gt;
&amp;lt;DIV id=&amp;quot;menu1&amp;quot; class=&amp;quot;tab-pane fade&amp;quot; markdown=&amp;quot;1&amp;quot;&amp;gt;
#### This is content in markdown
Neat  

* List
* More list
&amp;lt;/DIV&amp;gt;
&amp;lt;DIV id=&amp;quot;menu2&amp;quot; class=&amp;quot;tab-pane fade&amp;quot; markdown=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;h3&amp;gt;Menu 2&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Some more content in menu 2.&amp;lt;/p&amp;gt;
&amp;lt;/DIV&amp;gt;
&amp;lt;/DIV&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How this renders in site:&lt;/p&gt;

&lt;p&gt;&lt;ul class=&#34;nav nav-tabs&#34;&gt;
&lt;li class=&#34;active&#34;&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#home&#34;&gt;&amp;nbsp;&amp;nbsp;Home&amp;nbsp;&amp;nbsp;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#menu1&#34;&gt;&amp;nbsp;&amp;nbsp;Menu 1&amp;nbsp;&amp;nbsp;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle=&#34;tab&#34; href=&#34;#menu2&#34;&gt;&amp;nbsp;&amp;nbsp;Menu 2&amp;nbsp;&amp;nbsp;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;DIV class=&#34;tab-content&#34; markdown=&#34;1&#34;&gt;
&lt;DIV id=&#34;home&#34; class=&#34;tab-pane fade show active&#34; markdown=&#34;1&#34;&gt;
&lt;h3&gt;HOME tab is shown by default&lt;/h3&gt;
&lt;p&gt;Some content.&lt;/p&gt;
&lt;/DIV&gt;
&lt;DIV id=&#34;menu1&#34; class=&#34;tab-pane fade&#34; markdown=&#34;1&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;this-is-content-in-markdown&#34;&gt;This is content in markdown&lt;/h4&gt;

&lt;p&gt;Neat&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;More list
&lt;/DIV&gt;
&lt;DIV id=&#34;menu2&#34; class=&#34;tab-pane fade&#34; markdown=&#34;1&#34;&gt;
&lt;h3&gt;Menu 2&lt;/h3&gt;
&lt;p&gt;Some more content in menu 2.&lt;/p&gt;
&lt;/DIV&gt;
&lt;/DIV&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;extra-links&#34;&gt;&lt;strong&gt;Extra Links&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;George Cushen, in addition to &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34;&gt;the academic docs&lt;/a&gt;, has likewise created &lt;a href=&#34;https://georgecushen.com/create-your-website-with-hugo/&#34;&gt;a tutorial&lt;/a&gt; on his personal site detailing this workflow.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Leslie Myint&amp;rsquo;s website has a &lt;a href=&#34;https://lmyint.github.io/post/hugo-academic-tips/&#34;&gt;great post&lt;/a&gt; that effectively covers a large cross section of changes to the Academic theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some links to style formatting, more for me than anything&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/84&#34;&gt;https://github.com/gcushen/hugo-academic/issues/84&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/foss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/foss/</guid>
      <description>

&lt;h2 id=&#34;free-and-open-source-software&#34;&gt;&lt;strong&gt;Free and Open Source Software:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are a whole host of questions I still have regarding the intersections of individuals, societies, economies, and technology.  One of the more practically philosophical realizations of this intersection than FOSS.  Free and Open Source Software has become one of my go to tools in tackling a problem and has that special allure of feel good contribution and intrinsic reproducibility to it.  I&amp;rsquo;ve created a few tools that take a FOSS approach to GIS, and here I&amp;rsquo;d like to demonstrate how to create one.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll flesh this section out more at a later date, but some links I&amp;rsquo;ve leaned heavily on in the creation of FOSSFlood and ClusteR.&lt;/p&gt;

&lt;h2 id=&#34;some-useful-implementation-links&#34;&gt;Some useful implementation links:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ficonsulting.com/filabs/RInno&#34;&gt;https://ficonsulting.com/filabs/RInno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.r-bloggers.com/deploying-desktop-apps-with-r/:&#34;&gt;https://www.r-bloggers.com/deploying-desktop-apps-with-r/:&lt;/a&gt;  The foundation/inspiration for this implementation.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.robvanderwoude.com/vbstech_hta.php:&#34;&gt;https://www.robvanderwoude.com/vbstech_hta.php:&lt;/a&gt;  A great HTA resource page&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shiny-and-shiny-server-docs&#34;&gt;Shiny and shiny server docs&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/24789746/portable-browser-issues-when-deploying-r-shiny-app&#34;&gt;https://stackoverflow.com/questions/24789746/portable-browser-issues-when-deploying-r-shiny-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30965410/creating-stand-alone-shiny-app-chrome-error/31272180#31272180&#34;&gt;https://stackoverflow.com/questions/30965410/creating-stand-alone-shiny-app-chrome-error/31272180#31272180&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://englianhu.files.wordpress.com/2018/10/web-application-development-with-r-using-shiny-build-stunning-graphics-and-interactive-data-visualizations-to-deliver-cutting-edge-analytics-3ed.pdf&#34;&gt;https://englianhu.files.wordpress.com/2018/10/web-application-development-with-r-using-shiny-build-stunning-graphics-and-interactive-data-visualizations-to-deliver-cutting-edge-analytics-3ed.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;leaflet-resources&#34;&gt;Leaflet resources&lt;/h2&gt;

&lt;h2 id=&#34;useful-code-bits&#34;&gt;Useful code bits&lt;/h2&gt;

&lt;p&gt;There are some useful tidbits of code, mostly in R, that I&amp;rsquo;ve flagged specifically.  Many are part of FOSSFlood, but that global file is more than 1000 lines of code so it&amp;rsquo;s understandable if you didn&amp;rsquo;t see them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#/////////////////////////////////////
# -- Grab backup roads and points 
#/////////////////////////////////////
# TIGRIS Roads from Census
# Dev notes: here I grab the counties and use roads package to download roads (from Census)
# This is redundent with the OSM data I download for buildings defaults.  
# There is also no handling of zip codes which straddle state lines
print(&amp;quot;-- Base data collection - This may take upwards of 2 hours to run - Grabbing TIGER road files&amp;quot;)
CountiesFIPS &amp;lt;- quiet(counties(cb=TRUE))
CountiesFIPSProj &amp;lt;- sp::spTransform(CountiesFIPS, CRS(&amp;quot;+init=epsg:4326&amp;quot;))
aoiCounties &amp;lt;- CountiesFIPSProj[aoiZIPCodesProj, ]
# Error checking: Download roads for AOI that interset more than one state or county
if(length(unique(aoiCounties$COUNTYFP)) &amp;gt; 1) {
  myHoldRoads &amp;lt;- quiet(roads(unique(aoiCounties$STATEFP),unique(aoiCounties$COUNTYFP)[1], year = 2014, refresh = TRUE)[NULL,])
  for(i in unique(aoiCounties$COUNTYFP)) {
    myRoads &amp;lt;- quiet(roads(unique(aoiCounties$STATEFP),i, year = 2014, refresh = TRUE))
    myHoldRoads &amp;lt;- rbind(myHoldRoads, myRoads)
  }
  myRoads &amp;lt;- myHoldRoads
} else {
  myRoads &amp;lt;- quiet(roads(unique(aoiCounties$STATEFP),unique(aoiCounties$COUNTYFP), year = 2014, refresh = TRUE))
}
myRoadsProj &amp;lt;- sp::spTransform(myRoads, CRS(&amp;quot;+init=epsg:4326&amp;quot;))
myRoads_subset &amp;lt;- myRoadsProj[aoiZIPCodesProj, ]
writeOGR(obj=myRoads_subset, dsn=paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/roads&amp;quot;), layer=&amp;quot;tigerroads&amp;quot;, driver=&amp;quot;ESRI Shapefile&amp;quot;)

# OSM Roads and points
print(&amp;quot;-- Base data collection - This may take upwards of 2 hours to run - Grabbing OSM data&amp;quot;)
osmDataURL &amp;lt;- paste0(&amp;quot;https://download.geofabrik.de/north-america/us/&amp;quot;,tolower(gsub(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;, fips(aoiCounties$STATEFP[1], to = &amp;quot;Name&amp;quot;))),&amp;quot;-latest-free.shp.zip&amp;quot;)
download.file(osmDataURL, paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/&amp;quot;,tolower(gsub(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;, fips(aoiCounties$STATEFP[1], to = &amp;quot;Name&amp;quot;))),&amp;quot;-latest-free.shp.zip&amp;quot;))
unzip(paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/&amp;quot;,tolower(gsub(&amp;quot; &amp;quot;, &amp;quot;-&amp;quot;, fips(aoiCounties$STATEFP[1], to = &amp;quot;Name&amp;quot;))),&amp;quot;-latest-free.shp.zip&amp;quot;), exdir = paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName, &amp;quot;/geo/tmp&amp;quot;))
osmPoints &amp;lt;- readOGR(paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/gis_osm_pois_free_1.shp&amp;quot;), verbose = FALSE)
osmPointsProj &amp;lt;- sp::spTransform(osmPoints, CRS(&amp;quot;+init=epsg:4326&amp;quot;))
writeOGR(obj=osmPointsProj[aoiZIPCodesProj, ], dsn=paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/addresses&amp;quot;), layer=&#39;OSMaddresses&#39;, driver=&amp;quot;ESRI Shapefile&amp;quot;)
osmRoads &amp;lt;- readOGR(paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/gis_osm_roads_free_1.shp&amp;quot;), verbose = FALSE)
osmRoadsProj &amp;lt;- sp::spTransform(osmRoads, CRS(&amp;quot;+init=epsg:4326&amp;quot;))
writeOGR(obj=osmRoadsProj[aoiZIPCodesProj, ], dsn=paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/roads&amp;quot;), layer=&#39;OSMroads&#39;, driver=&amp;quot;ESRI Shapefile&amp;quot;)

# OpenAddresses points
print(&amp;quot;-- Base data collection - This may take upwards of 2 hours to run - Grabbing OpenAddresses data&amp;quot;)
if(aoiCounties$STATEFP %in% c(&#39;09&#39;,&#39;23&#39;,&#39;25&#39;,&#39;33&#39;,&#39;44&#39;,&#39;50&#39;,&#39;34&#39;,&#39;36&#39;,&#39;42&#39;)) {
  oaURL &amp;lt;- &amp;quot;https://data.openaddresses.io/openaddr-collected-us_northeast.zip&amp;quot;
} else if(aoiCounties$STATEFP %in% c(&#39;18&#39;,&#39;17&#39;,&#39;26&#39;,&#39;39&#39;,&#39;55&#39;,&#39;19&#39;,&#39;20&#39;,&#39;27&#39;,&#39;29&#39;,&#39;31&#39;,&#39;38&#39;,&#39;46&#39;)) {
  oaURL &amp;lt;- &amp;quot;https://data.openaddresses.io/openaddr-collected-us_midwest.zip&amp;quot;
} else if(aoiCounties$STATEFP %in% c(&#39;10&#39;,&#39;11&#39;,&#39;12&#39;,&#39;13&#39;,&#39;24&#39;,&#39;37&#39;,&#39;45&#39;,&#39;51&#39;,&#39;54&#39;,&#39;01&#39;,&#39;21&#39;,&#39;28&#39;,&#39;47&#39;,&#39;05&#39;,&#39;22&#39;,&#39;40&#39;,&#39;48&#39;)) {
  oaURL &amp;lt;- &amp;quot;https://data.openaddresses.io/openaddr-collected-us_south.zip&amp;quot;
} else if(aoiCounties$STATEFP %in% c(&#39;04&#39;,&#39;08&#39;,&#39;16&#39;,&#39;35&#39;,&#39;30&#39;,&#39;49&#39;,&#39;32&#39;,&#39;56&#39;,&#39;02&#39;,&#39;06&#39;,&#39;15&#39;,&#39;41&#39;,&#39;53&#39;)) {
  oaURL &amp;lt;- &amp;quot;https://data.openaddresses.io/openaddr-collected-us_west.zip&amp;quot;
}
download.file(oaURL, paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/OpenAddresses.zip&amp;quot;))
unzip(paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/OpenAddresses.zip&amp;quot;), exdir = paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName, &amp;quot;/geo/tmp&amp;quot;))
FullOpenAddresses &amp;lt;- paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/tmp/us/&amp;quot;,tolower(fips(aoiCounties$STATEFP[1], to = &amp;quot;Abbreviation&amp;quot;)),&amp;quot;/statewide.csv&amp;quot;)
FullOpenAddressesCSV&amp;lt;- read.csv(FullOpenAddresses, header=TRUE, stringsAsFactors = FALSE)
coordinates(FullOpenAddressesCSV)&amp;lt;- ~LON+LAT
proj4string(FullOpenAddressesCSV) &amp;lt;- CRS(&amp;quot;+init=epsg:4326&amp;quot;)
writeOGR(obj=FullOpenAddressesCSV[aoiZIPCodesProj, ], dsn=paste0(basedir,&amp;quot;/AOI/&amp;quot;,UserZipCodeFileName,&amp;quot;/geo/addresses&amp;quot;), layer=&#39;OpenAddresses&#39;, driver=&amp;quot;ESRI Shapefile&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/dronemapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/dronemapping/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/YUN00120.jpg&#34; alt=&#34;&#34; /&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Need help passing your part 107?  I can recommend the following resources:&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6_ucCKFJUCU&amp;amp;t=1s&#34;&gt;https://www.youtube.com/watch?v=6_ucCKFJUCU&amp;amp;t=1s&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://3dr.com/faa/drone-practice-tests/&#34;&gt;https://3dr.com/faa/drone-practice-tests/&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jrupprechtlaw.com/part-107-test-study-guide/&#34;&gt;https://jrupprechtlaw.com/part-107-test-study-guide/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;drones-for-mapping-and-research&#34;&gt;&lt;strong&gt;Drones for mapping and research&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;One of the most exciting aspects of working in the Environmental Sciences is in exploring how the application of new tools and technologies has allowed us to reimagine and streamline how we observe, process, understand, and communicate the state of the world.  Take for instance, the humble terrain surface.  Although I‚Äôm not quite old enough to recall walking to school uphill both ways in a snowstorm, there was once a time when the USGS topo maps were the gold standard in terms of how closely we could replicate the undulations of landforms, and can recall many a boy scout meeting where we used these maps to plan our next adventure.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/KS_Lawrence West.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In early 2000, we brought these representations to the digital domain with the flight of the &lt;a href=&#34;https://www2.jpl.nasa.gov/srtm/mission.htm&#34;&gt;Shuttle Radar Topography Mission.&lt;/a&gt;  This gave us a digital representation of the world at a ~25-meter resolution across much of the globe.  Fantastic for most large-scale representations, this is still entirely too large to be relevant at a building scale.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/GISData.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next major milestone wouldn‚Äôt be seen until early 2016 with the USGS announcement of the &lt;a href=&#34;https://www.usgs.gov/core-science-systems/ngp/3dep&#34;&gt;3D Elevation Program (3DEP)&lt;/a&gt;.  This program set standards for the collection and curation of Airborne LIDAR (Light Detection and Ranging).  These data are high resolution point representations of elevation, with an average spacing of &amp;gt;4 points per square meter with less than 6 cm of variation across a flat surface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/FY19_Partnerships_territories_08212019.jpg&#34; alt=&#34;&#34; /&gt;
This represents a major leap forward but is not without its drawbacks.  Firstly, although LIDAR collects elevations, it does not collect imagery, which makes viewing the surface much less intuitive than it would otherwise be.  Additionally, although the resulting elevations are accurate, they are still not dense enough or accurate enough to compete with high precision surveys, and depending on the use case, may be out of date by more than 3 years.  In these instances, small Unmanned Aerial Systems, more commonly known as drones, offer a unique solution to some of these shortcomings.  Using commercially available hardware and cutting-edge software, we are able to fly over an area and collect imagery which we use to create our own custom point clouds and 3D models.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/OreadOrthoTrimmedSmaller.gif&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/YUN00016.jpg&#34; alt=&#34;&#34; /&gt;
As part of my dissertation, I am interested in flying areas to determine what factors go into an effective terrestrial mapping effort.  The above images are a small sampling of outputs which I can generate, but can also include 3D point clouds, photo-realistic models, updated aerial maps, and standard aerial photography outputs.  If you have an area you would like flown, particularly if it has interesting and complex geometry or if it‚Äôs near a body of water, please contact me at jcoll AT ku.edu and we‚Äôll find a way to collaborate.&lt;/p&gt;

&lt;h1 id=&#34;ku-natural-history-museum-s-science-on-tap&#34;&gt;&lt;strong&gt;KU Natural History Museum‚Äôs Science on Tap&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://kansas-my.sharepoint.com/:p:/g/personal/j610c377_home_ku_edu/ET7tcX0YvdpHh7MolB5K9VsBZ9kGxGMvF83Vjvh3VoB_bg?e=k1nIWc&#34;&gt;A small presentation for KU Natural History Museum‚Äôs Science on Tap | Free State Brewing CO.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/firstgoogleearthmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/firstgoogleearthmap/</guid>
      <description>

&lt;h2 id=&#34;a-basic-map-in-google-maps&#34;&gt;&lt;strong&gt;A basic map in Google Maps:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Google Earth is a great platform to start your exploration of the GISciences, even if it&amp;rsquo;s not a tool you&amp;rsquo;ll use in &amp;ldquo;the real world&amp;rdquo;.  There are a number of ways to access Google Earth, but this tutorial will cover &lt;a href=&#34;https://www.google.com/earth/versions/&#34;&gt;Google Earth Pro on the Desktop&lt;/a&gt; (scroll to the bottom of the page)&lt;/p&gt;

&lt;p&gt;Navigating around the world
Spend some time practicing navigating around in the world, the mouse and scroll wheel&lt;/p&gt;

&lt;p&gt;Making a map:
Maps are complex pieces of work and often show more than just the satellite image of the world.  Here are a few pieces of data for you to start with&lt;/p&gt;

&lt;p&gt;The&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/foss_rs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/foss_rs/</guid>
      <description>

&lt;h2 id=&#34;introduction-to-remote-sensing&#34;&gt;&lt;strong&gt;Introduction to Remote Sensing&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/geog358/media/GPSSplash.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Remote sensing is a course onto itself, but it‚Äôs worth introducing here as GIScience, GISystems, and remote sensing overlap more than they diverge.  Remote sensing, as opposed to in-situ measurement, is the measurement of an object from a distance, most often a great distance.&lt;/p&gt;

&lt;h2 id=&#34;objectives&#34;&gt;&lt;strong&gt;Objectives&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;This lab should provide you with the bulk of the background knowledge needed to dive further into the field of remote sensing.  We&amp;rsquo;ll cover common terminology and technology, some basic applications, and cover how R can be used to perform common GIScience and remote sensing operations.&lt;/p&gt;

&lt;h2 id=&#34;quick-vocab&#34;&gt;&lt;strong&gt;Quick vocab&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;To start off, lets review some key vocabulary that often comes up when discussing remote sensing.  These definitions are important when discussing concepts such as distortion and illumination angles but will only crop up sporadically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In physics, the &lt;strong&gt;nadir&lt;/strong&gt; direction for a given location is the local vertical direction pointing in the direction the force of gravity acts at that location.  In remote sensing this concept is, in essence, the point on a photo which is directly below the satellite.  It&amp;rsquo;s opposite direction, &lt;strong&gt;zenith&lt;/strong&gt;, refers to the direction directly opposed to gravity.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Julian days&lt;/strong&gt; are equivalent to Day of the Year, starting on January first of each year.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Epoch time&lt;/strong&gt;, also know as Unix time or POSIX time, is the number of seconds that have elapsed since January first, 1970 at midnight GMT/UTC, and is often used to indicate the timestamp of the data. (&lt;a href=&#34;https://www.epochconverter.com/&#34;&gt;handy web converter&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Remote sensing data comes from &lt;strong&gt;instruments&lt;/strong&gt;, or sensors, which in turn are housed aboard &lt;strong&gt;platforms&lt;/strong&gt;, or satellites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-basics&#34;&gt;&lt;strong&gt;The basics&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;It‚Äôs difficult to learn about remote sensing without first recalling some basic physics.  First, take a second and recall how eyesight and vision works, using the conceptual diagram below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/placeholdereyesremotesensing.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Remote sensing is the measurement of the electromagnetic spectrum.  Energy (not necessarily in the visible spectrum) from a source, strikes the object, and then travels to the eye.  We‚Äôll break this down a little further.  There are several different flavors of remote sensing, but the two most common ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Active sensing&lt;/strong&gt;: A sensor or pair of instruments that both emit and receive measurements.  Common examples of active remote sensing include ground penetrating radar, sonar, and LIDAR.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passive sensing&lt;/strong&gt;: A sensor which only receives measurements.  These are some of the most common forms of sensors, examples of which include: Your eyes, cameras, and most earth orbiting satellites.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we need to introduce the most common properties used to differentiate and classify different remote sensing platforms.  These properties are all in the context of scale and resolution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Radiometric resolution&lt;/strong&gt;: Radiometric resolution is the number of brightness levels that can be detected by the sensor, also known as radiometric sensitivity, quantization, or simply the number of bits per pixel.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/RadiometricResolution.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spectral resolution&lt;/strong&gt;: Spectral resolution refers to the number and position of the sensor bands along the EM spectrum.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/SpectralResolution.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spatial resolution&lt;/strong&gt;: Spatial resolution is the ground distance of the pixel, and is typically reported in meters at nadir at the equator.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/tempSpatialResolution.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Temporal resolution&lt;/strong&gt;: Temporal resolution, or more directly refereed to as revisit time, is, as the name suggests, the time between a repeated observation of the same place on the globe.  Temporal resolution is the result of a number of factors, but the two largest are the swath width and the orbit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swath width&lt;/strong&gt; is the width of a single image, and can either be small or large,  The image below (gratefully pilfered from Figure 1 in &lt;a href=&#34;https://doi-org.www2.lib.ku.edu/10.1016/j.rse.2019.111254&#34;&gt;https://doi-org.www2.lib.ku.edu/10.1016/j.rse.2019.111254&lt;/a&gt;) shows the swath of a Landsat-8 OLI orbit (185 km wide, left) compared  and a Sentinel-2A MSI orbit (290 km wide, right).
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/Swathwidth.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Orbit&lt;/strong&gt; refers to the direction and nature of the travel path of satellites around a body.  There are a number of common orbital patterns satellites exhibit.  For more information, see &lt;a href=&#34;https://www.sciencelearn.org.nz/image_maps/13-satellites-and-orbits&#34;&gt;an example of the different orbits and satellites&lt;/a&gt;, and explore satellite orbits at this &lt;a href=&#34;https://maps.esri.com/rc/sat/index.html&#34;&gt;ESRI site&lt;/a&gt;.&lt;br /&gt;
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/SatelliteOrbits.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Geostationary: The orbit of the sensor is such that it rotates at a speed which maintains the satellites position over the same spot on the earth.  Most commonly seen with communication and weather satellites.&lt;/li&gt;
&lt;li&gt;Sun synchronous: The orbit of this satellite follows the sun.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;an-introduction-to-platforms&#34;&gt;&lt;strong&gt;An introduction to platforms&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;As you might have guessed by now, a proper understanding of remote sensing hinges on a thorough understanding of the data structure and lineage.  Here we‚Äôll introduce two of my favorite platforms, MODIS, and Landsat&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/MODIS-Aqua.jpg&#34; alt=&#34;&#34; /&gt;
&lt;a href=&#34;https://modis.gsfc.nasa.gov/about/&#34;&gt;MODIS,(or Moderate Resolution Imaging Spectroradiometer)&lt;/a&gt; is a key instrument aboard the Terra (originally known as EOS AM-1) and Aqua (originally known as EOS PM-1) satellites.  These are passive remote sensing platforms, and so follow a sun synchronous orbit.  Terra&amp;rsquo;s orbit around the Earth is timed so that it passes from north to south across the equator in the morning, while Aqua passes south to north over the equator in the afternoon. Terra MODIS and Aqua MODIS are viewing the entire Earth&amp;rsquo;s surface every 1 to 2 days, acquiring data in 36 spectral bands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/landsat_8_01.jpg&#34; alt=&#34;&#34; /&gt;
The Landsat program is the longest-running enterprise for acquisition of satellite imagery of Earth. It is a joint NASA/USGS program. Back in July of 1972, the first satellite was launched, and eventually became known as Landsat 1.  The most recent satellite, Landsat 8, was launched on February 11, 2013, and is still currently operational. There are a few different sensors onboard, which are outlined below.  Landsat 1 through 5 carried the Landsat Multispectral Scanner (MSS). Landsat 4 and 5 carried both the MSS and Thematic Mapper &amp;trade; instruments. Landsat 7 uses the Enhanced Thematic Mapper Plus (ETM+) scanner. Landsat 8 uses two instruments, the Operational Land Imager (OLI) for optical bands and the Thermal Infrared Sensor (TIRS) for thermal bands. Handy charts for these instruments can be found on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Landsat_program&#34;&gt;wikipedia page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-application&#34;&gt;&lt;strong&gt;A simple application&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;There are a number of uses for remote sensing data, but one of the cornerstones of remote sensing is the normalized difference index.  If we take two numbers and subtract them, and divide that by the sum of those same two numbers, we end up with a number that can range from -1 to 1.  This normalization can tell us a lot about a process, and is performed for a wide variety of earth classification operations such as snow (NDSI), water (NDWI), and vegetative health (NDVI).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/genericNDVI.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The latter, NDVI, is an often performed analysis to give us a roughly quantitative analysis of the vegetative health of a system.  When sunlight strikes objects, some wavelengths of this spectrum are absorbed and other wavelengths are reflected. The pigment in plant leaves, chlorophyll, strongly absorbs visible light (from 0.4 to 0.7 ¬µm) for use in photosynthesis, whereas the cell structure of the leaves strongly reflects near-infrared light (from 0.7 to 1.1 ¬µm). The more leaves a plant has, the more these wavelengths of light are affected.  NDVI values are fairly relative (the difference between 0.5 to 0.6 is not generally quantifiable), but in general, anything above 0.2 is vegetation, and higher values are roughly equivalent to more vegetation.  If we look back at the landsat 8 sensor, we can see that those wavelengths are equivalent to bands 4 and 5.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/LandsatNDVI.PNG&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;lab-exercise&#34;&gt;&lt;strong&gt;Lab exercise&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s use our newfound knowledge to perform one of the most common operations one might want to take, a change detection study.  Let‚Äôs explore how NDVI changes by land cover type between summer and fall.  We&amp;rsquo;ll use landsat 8.&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;You may notice a slightly unique naming convention in the code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# Pick an AOI
xx &amp;lt;- list() 
xx$AOI_center...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like to create an empty list and stuff all cartographic variables into a single place for easy access when it comes time to create outputs.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;
  

&lt;p&gt;Let&amp;rsquo;s lay out our workflow conceptually.  We&amp;rsquo;ll first establish an area over which we&amp;rsquo;ll perform the analysis.  Next, we&amp;rsquo;ll scrape an amazon web service to identify suitable data to use for our analysis, and grab land cover data to perform our analysis.  Afterwards, we&amp;rsquo;ll calculate NDVI and perform our zonal statistics using our land cover.  Finally, we&amp;rsquo;ll create a pretty image as our output image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Last build: 7/30/20
# install.packages(&amp;quot;devtools&amp;quot;)  # Will throw errors if RTools is not installed, you can ignore this for the remained of installation
# install.packages(&amp;quot;geosphere&amp;quot;)  # For geodesic buffer function
# install.packages(&amp;quot;leaflet&amp;quot;)  # For visualization
# install.packages(&amp;quot;leafem&amp;quot;)  # For visualization
# install.packages(&amp;quot;raster&amp;quot;) # for raster vis
# library(devtools, quietly = TRUE)
# devtools::install_github(&amp;quot;ropensci/FedData&amp;quot;)  # For easy NLCD download
# devtools::install_github(c(&amp;quot;ropensci/getlandsat&amp;quot;))  # For easy landsat download

library(raster, quietly = TRUE)  # vis
library(dplyr, quietly = TRUE)  # Syntax sugar
library(lubridate, quietly = TRUE)  # more syntax sugar
library(rgeos, quietly = TRUE)  # second buffer function
library(jsonlite, quietly = TRUE)  # API query
library(httr, quietly = TRUE)  # web download
library(leaflet, quietly = TRUE)  # vis
library(leafem, quietly = TRUE)  # vis
library(htmltools, quietly = TRUE)  # vis
library(FedData, quietly = TRUE)  # Easy NLCD
library(getlandsat, quietly = TRUE)  # Easy landsat

## Helper functions

## geocoding function using OSM Nominatim API -- details: http://wiki.openstreetmap.org/wiki/Nominatim
## Inputs: a human readable address or colloquial name string
## Outputs: success: a sf point with lat and long | Failure: an empty dataframe
## modified from: D.Kisler @ https://datascienceplus.com/osm-nominatim-with-r-getting-locations-geo-coordinates-by-its-address/
nominatim_osm &amp;lt;- function(address = NULL) {
  # Construct a url request
  d &amp;lt;- jsonlite::fromJSON( 
    gsub(&#39;\\@addr\\@&#39;, gsub(&#39;\\s+&#39;, &#39;\\%20&#39;, address), &#39;http://nominatim.openstreetmap.org/search/@addr@?format=json&amp;amp;addressdetails=0&amp;amp;limit=1&#39;))
  
  # return parsed sf point
  return(
    sf::st_as_sf(d %&amp;gt;% select(&#39;lon&#39;,&#39;lat&#39;,&#39;display_name&#39;),
                 coords=c(&amp;quot;lon&amp;quot;,&amp;quot;lat&amp;quot;), 
                 crs=sf::st_crs(4326),
                 remove=TRUE)
  )
}

## geodesic buffer function -- details: http://wiki.openstreetmap.org/wiki/Nominatim
## Inputs: a coordinate pair in EPSG:4326
## Outputs: the equivelent UTM zone EPSG
## all credit to Robin Lovelace, Jakub Nowosad, Jannes Muenchow @ https://geocompr.robinlovelace.net/reproj-geo-data.html
lonlat2UTM = function(lonlat) {
  utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1
  if(lonlat[2] &amp;gt; 0) {
    utm + 32600
  } else{
    utm + 32700
  }
}

# set a working directory
setwd(&amp;quot;C:/Users/Cornholio/Desktop/coolclass&amp;quot;) # your own filepath here

# Pick an AOI and (small) buffer distance
xx &amp;lt;- list() 
xx$AOI_center &amp;lt;- nominatim_osm(&amp;quot;Lawrence, KS&amp;quot;) 
# xx$AOI_center &amp;lt;- sp::SpatialPoints(list(-95.23595,38.97194)) %&amp;gt;% sf::st_as_sfc() %&amp;gt;% sf::st_set_crs(4326) # or spesify a lon/lat point
mybufferdist_m = 1200

# Buffer AOI point
# get UTM epsg
aoiUTMEPSG &amp;lt;- lonlat2UTM(sf::st_coordinates(xx$AOI_center))
# reproject
xx$AOI_center_utm &amp;lt;- sf::st_transform(xx$AOI_center,aoiUTMEPSG)
# buffer (gBuffer requires a spatial object, not an sf), return to sf, reattach crs
xx$AOI_buffer_utm &amp;lt;- rgeos::gBuffer(sp::SpatialPoints(sf::st_coordinates(xx$AOI_center_utm)),width = mybufferdist_m) %&amp;gt;%
  sf::st_as_sfc() %&amp;gt;%
  sf::st_set_crs(aoiUTMEPSG) 
xx$AOI_buffer &amp;lt;- sf::st_transform(xx$AOI_buffer_utm, 4326) # reproject back to wgs84
xx$processbounds &amp;lt;- sf::st_bbox(xx$AOI_buffer) 
# st_bbox doesn&#39;t return a spatial object, so we&#39;ll correct for that here
xx$AOI_bbox &amp;lt;- sf::st_bbox(xx$AOI_buffer) %&amp;gt;% sf::st_as_sfc() %&amp;gt;% sf::st_set_crs(4326)

# discover path and row
httr::GET(&#39;https://prd-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/atoms/files/WRS2_descending_0.zip&#39;, 
          write_disk(paste0(getwd(), &amp;quot;/WRS2_descending_0.zip&amp;quot;)))
unzip(paste0(getwd(), &amp;quot;/WRS2_descending_0.zip&amp;quot;), exdir = getwd())
xx$pathrow &amp;lt;- sf::read_sf(paste0(getwd(), &amp;quot;/WRS2_descending.shp&amp;quot;))

# That pathrow file covers the entire globe, let&#39;s make this a tiny bit gentler to visualize
# and subset that to just the pathrows that intersect our AOI
xx$pathrow_subset &amp;lt;- xx$pathrow[xx$AOI_bbox,]

# explore geographic context
leaflet() %&amp;gt;%
  addProviderTiles(providers$Stamen.TonerLite, group = &amp;quot;Base Map&amp;quot;) %&amp;gt;%
  addPolygons(data=xx$AOI_buffer,color=&amp;quot;red&amp;quot;) %&amp;gt;%
  addPolygons(data=xx$pathrow_subset,
              color=&amp;quot;black&amp;quot;,
              fill = FALSE,
              label = mapply(function(x, y) {
                HTML(sprintf(&amp;quot;&amp;lt;em&amp;gt;Path/row:&amp;lt;/em&amp;gt;%s-%s&amp;quot;, htmlEscape(x), htmlEscape(y)))},
                xx$pathrow_subset$PATH, xx$pathrow_subset$ROW, SIMPLIFY = F),
              labelOptions = lapply(1:nrow(xx$pathrow_subset), function(x) {
                labelOptions(noHide = T)
              })) %&amp;gt;% 
  fitBounds(as.numeric(floor(xx$processbounds$xmin)), 
            as.numeric(floor(xx$processbounds$ymin)), 
            as.numeric(ceiling(xx$processbounds$xmax)), 
            as.numeric(ceiling(xx$processbounds$ymax)))

# Note: Perhaps a bit overkill, all we needed to do here is ensure that our AOI is completely enclosed within a single path/row
# We&#39;ll cover mosaicking (stitching together multiple scenes at once) later in the course, but for now if you end up inside more than
# one, adjust your point until you fall squarely within a single tile (or entirely in a crossover section)

# Find the scenes for your path and row
summerdaterange &amp;lt;- interval(as.POSIXct(&amp;quot;2015-06-01 00:00:00&amp;quot;), 
                            as.POSIXct(&amp;quot;2015-09-01 00:00:00&amp;quot;))   

summerscene &amp;lt;- getlandsat::lsat_scenes() %&amp;gt;% 
  filter(row == xx$pathrow_subset$ROW) %&amp;gt;%                # Filter for row...
  filter(path == xx$pathrow_subset$PATH) %&amp;gt;%              # and path
  filter(acquisitionDate %within% summerdaterange) %&amp;gt;%    # get our date
  arrange(cloudCover) %&amp;gt;%                                 # put the least cloudy scene first
  .[1,]                                                   # and peel it off

summerscene
# as we see, there is a suitable cloud free scene, let&#39;s look at it&#39;s formatting:
summerscene$download_url 

# In addition to making a handy scene scrapper, the getLandsat package is also a wrapper to download scenes by name
xx$summer_band4 &amp;lt;- getlandsat::lsat_image(paste0(summerscene$entityId,&amp;quot;_B4.TIF&amp;quot;)) %&amp;gt;%
  raster::raster() 

# Finally, let&#39;s mask it out to our buffer
xx$summer_band4 &amp;lt;- xx$summer_band4 %&amp;gt;% 
  raster::mask(sf::as_Spatial(xx$AOI_buffer_utm))

# and visualize
leaflet() %&amp;gt;% 
  addProviderTiles(providers$Stamen.TonerLite, group = &amp;quot;Base Map&amp;quot;) %&amp;gt;%
  addRasterImage(xx$summer_band4, layerId = &amp;quot;values&amp;quot;) %&amp;gt;% 
  addMouseCoordinates() %&amp;gt;%
  addImageQuery(xx$summer_band4, type=&amp;quot;mousemove&amp;quot;, layerId = &amp;quot;values&amp;quot;)

# Lets do the same for band 5
xx$summer_band5 &amp;lt;- getlandsat::lsat_image(paste0(summerscene$entityId,&amp;quot;_B5.TIF&amp;quot;)) %&amp;gt;%
  raster::raster() 
xx$summer_band5 &amp;lt;- xx$summer_band5 %&amp;gt;% 
  raster::mask(sf::as_Spatial(xx$AOI_buffer_utm))  

# Finally, our NDVI calculation
xx$summer_ndvi &amp;lt;- overlay(xx$summer_band5, xx$summer_band4, fun = function(r1, r2) { return( (r1 - r2)/(r1 + r2)) })

# and visualize
leaflet() %&amp;gt;% 
  addProviderTiles(providers$Stamen.TonerLite, group = &amp;quot;Base Map&amp;quot;) %&amp;gt;%
  addRasterImage(xx$summer_ndvi, layerId = &amp;quot;values&amp;quot;) %&amp;gt;% 
  addMouseCoordinates() %&amp;gt;%
  addImageQuery(xx$summer_ndvi, type=&amp;quot;mousemove&amp;quot;, layerId = &amp;quot;values&amp;quot;)



NLCD &amp;lt;- FedData::get_nlcd(template = sf::as_Spatial(xx$AOI_buffer_utm),
                 year = 2016,
                 dataset = &amp;quot;Land_Cover&amp;quot;,
                 label = &amp;quot;AOI&amp;quot;)
# backup, because MRLC service is down more often than it&#39;s up...
# this may take a while because we&#39;re grabbing all of CONUS
httr::GET(&#39;https://s3-us-west-2.amazonaws.com/mrlc/NLCD_2016_Land_Cover_L48_20190424.zip&#39;, 
          write_disk(paste0(getwd(), &amp;quot;/NLCD_2016_Land_Cover_L48.zip&amp;quot;)))
unzip(paste0(getwd(), &amp;quot;/NLCD_2016_Land_Cover_L48.zip&amp;quot;), exdir = getwd())

raster::zonal(x, z, fun=&#39;mean&#39;, digits=0, na.rm=TRUE, ...) 










lsat_image(urls[1])
urls
tifs &amp;lt;- grep(&amp;quot;\\.TIF$&amp;quot;, summerscene$Key, value = TRUE)

download_url 

# Explore format

Finally, lets grab NLCD landcover data (note: 2016 is avalible but not added to FedData as of yet)
# FedData::get_nlcd_tile(template=as.spaxx$AOI_bbox,
# FedData::get_nlcd(template=sp::spTransform(as(sf::st_as_sfc(xx$AOI_bbox),&amp;quot;Spatial&amp;quot;), CRSobj = &amp;quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0&amp;quot;),
#                        label=&#39;AOI&#39;,
#                        year=2016,
#                        dataset=&amp;quot;Land_Cover&amp;quot;,
#                        # tileName=N01W01,
#                        raw.dir=getwd(),
#                        extraction.dir=getwd())
sp::spTransform(as(sf::st_as_sfc(xx$AOI_bbox),&amp;quot;Spatial&amp;quot;), CRS(paste0(&amp;quot;+proj=utm +datum=NAD83 +zone=&amp;quot;,floor((sf::st_coordinates(xx$AOI_center)[1]+180)/6)+1)))
FedData::get_nlcd(template=sp::spTransform(as(sf::st_as_sfc(xx$AOI_bbox),&amp;quot;Spatial&amp;quot;), CRS(paste0(&amp;quot;+proj=utm +datum=NAD83 +zone=&amp;quot;,floor((sf::st_coordinates(xx$AOI_center)[1]+180)/6)+1))),
                  label=&#39;AOI&#39;,
                  year=2011,
                  dataset=&amp;quot;Land_Cover&amp;quot;)

vepPolygon &amp;lt;- polygon_from_extent(raster::extent(672800, 740000, 4102000, 4170000),
                                  proj4string = &amp;quot;+proj=utm +datum=NAD83 +zone=12&amp;quot;)
NLCD &amp;lt;- get_nlcd(template = vepPolygon,
                 year = 2016,
                 dataset = &amp;quot;Land_Cover&amp;quot;,
                 label = &amp;quot;vepPolygon&amp;quot;)



sf::as_Spatial(xx$AOI_buffer_utm)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jimcoll.github.io/courses/random/gee_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jimcoll.github.io/courses/random/gee_intro/</guid>
      <description>

&lt;h2 id=&#34;introduction-to-google-earth-engine&#34;&gt;&lt;strong&gt;Introduction to Google Earth Engine:&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/GEEBoK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-google-earth-engine&#34;&gt;&lt;strong&gt;What is Google Earth Engine&lt;/strong&gt;:&lt;/h2&gt;

&lt;p&gt;Google Earth Engine (GEE) is a cloud-based data and analysis platform which combines more than 17 petabytes of geospatial data, analytic APIs, and a web based Integrated Development Environment in one package and runs on Google‚Äôs computational infrastructure, enabling interactive earth data analyses on scales not previously feasible.  This platform was first introduced to the public in 2013 as a means of performing an analysis of global forest cover change, published in Science (Hansen et al., 2013).  In this flagship application, the authors sought to quantify the spatial distribution and global state of forest loss and gain from 2000 to 2012 by blending more than 654,000 Landsat scenes across the 12 years of the analysis ‚Äî the resultant analysis of 700 Terapixels of data took more than 1 million hours of computation and exported results in a comparatively trivial 4 days across the Google compute infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/HansenImage.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Such analyses once used to sit behind such extreme barriers of entry that no one would have been able to produce, much less reproduce, these results.&lt;br /&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Hr3F0s9oKwQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;accessing-gee&#34;&gt;&lt;strong&gt;Accessing GEE&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;To use GEE, you will need to request a user account at &lt;a href=&#34;https://signup.earthengine.google.com/#!/&#34;&gt;https://signup.earthengine.google.com/#!/&lt;/a&gt;.  Once approved, you have access to the datasets and the Google computation infrastructure.  This access takes the form of a REST API.  There are currently two means of doing so, one Python based, and the other JavaScript based.  The less popular of the two methods, the Python library, allows users to interact with Earth Engine using the Python programming language.  The Google Earth Engine API guide has a full walk through of how to install the needed libraries, and is available at &lt;a href=&#34;https://developers.google.com/earth-engine/python_install&#34;&gt;https://developers.google.com/earth-engine/python_install&lt;/a&gt;. The more popular means of accessing GEE is through the JavaScript library which is accessed through a web-based IDE, more commonly called the Code Editor, by pointing a browser at &lt;a href=&#34;https://code.earthengine.google.com/&#34;&gt;https://code.earthengine.google.com/&lt;/a&gt; and logging in with an authorized GEE account.  Although not specifically required, it is recommended that you use Google Chrome, and as this is the most popular means of accessing GEE the rest of this entry will be written using the JavaScript IDE.  Don‚Äôt worry if you are more familiar with Python, the transition to JavaScript is relatively painless and primers are available at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction&lt;/a&gt;.  One of the first steps for those new to GEE is to explore the features of the JavaScript API.  In the upper right-hand corner of the code editor, click on help &amp;gt; Feature Tour to take a quick guided tour of the platform.&lt;/p&gt;

&lt;h3 id=&#34;gee-operations&#34;&gt;&lt;strong&gt;GEE Operations&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Broadly speaking there are 3 major types of operations one can perform in GEE: Methods, Algorithms, and Functions.  The general structure of these are exemplified in Figure 1. Methods require an object to act on and take inputs, as exemplified in Figure 1, line 24, where we query the SRTM dataset for all values greater than 2000. Algorithms are objects themselves and take a specific input to return an object, as exemplified in Figure 1, line 27 where we use the Terrain algorithm to create a hillshade image from SRTM.  Functions take an input and do something within the API, as exemplified in Figure 1, line 30, where we add the Hillshade layer to the map.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/GEEFigure1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;data-structures-objects&#34;&gt;&lt;strong&gt;Data Structures/Objects&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Data objects in GEE are slightly different from more traditional desktop GIS software, but the concepts are very similar.  These differences are most pronounced with the data structures outlined below in Figure 2.  What GEE calls Images can be thought of as Rasters, and just as Rasters may have more than one band, so too may Images.  What GEE refers to as an ImageCollection are simply a collection of Images.  What GEE refers to as Features are analogous to features in a shapefile or geodatabase, so FeatureCollections are analogous to the larger shapefile or feature classes in a geodatabase.  These data structures also borrow concepts from Object Oriented Programming (OOP) in that Feature can be thought of as the parent of Image and likewise ImageCollections are children of FeatureCollections.  Therefore, many of the methods and operations available for Features and FeatureCollections are inherited by Images and ImageCollections.
&lt;img src=&#34;https://jimcoll.github.io/courses/random/media/GEEFigure2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;asset-management&#34;&gt;&lt;strong&gt;Asset Management&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;GEE hosts more than 17 petabytes of publicly available data which can be redistributed.  However, users also have the option to upload their own data in popular GeoTIFF or shapefile formats for ingestion into the system as user assets.  Assets are limited to 10 GB in size, and are counted as part of your shared Google storage quota (spread across Gmail, Google Drive, ect.).  Once in the platform, they are treated the same as any other dataset in the platform and can be shared with other users.&lt;/p&gt;

&lt;h3 id=&#34;data-preparation&#34;&gt;&lt;strong&gt;Data Preparation&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;GEE handles many of the concerns typically associated with data preparation, such as storage, cataloging, and projecting the data appropriately.  GEE has ingested many of the most popular remote sensing data from various satellite platforms such as LANDSAT, MODIS, and Sentinel to name just a few.  The full collection can be browsed at &lt;a href=&#34;https://developers.google.com/earth-engine/datasets/catalog/&#34;&gt;https://developers.google.com/earth-engine/datasets/catalog/&lt;/a&gt;.  When ingested, the data is stored in its native projection and format to preserve data integrity, and the metadata necessary to effectively use them is also included in each image as properties.  Users may inspect, project, and resample the data as necessary, but because the GEE team takes care of these details when the data is ingested, the ‚Äútime to science‚Äù is rapidly accelerated and users are free to spend that time on the analysis and presentation instead of the relatively canned portion of data preprocessing.  By using the Search Box at the top of the IDE, you can find relevant datasets and explore how they can be used in GEE.&lt;/p&gt;

&lt;h3 id=&#34;mappers-and-reducers&#34;&gt;&lt;strong&gt;Mappers and Reducers&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;When working with data in GEE, there are two types of operations we can perform over the data, mapping and reducing.  Mapping applies a function to each image in a collection, so a stack of n elements results in a transformed stack of n elements, and is useful when we need to do something to every image (for instance, calculating NDVI over a timeseries of images).  Reducers on the other hand take one or more input features and return a reducer number of outputs.  These often take the form of conventional map algebra expressions.  These expressions can be as conceptually simple as pulling the maximum value of a stack of pixels in an ImageCollection to as complex as non-parametric trends of slope or regional reducers.&lt;/p&gt;

&lt;h3 id=&#34;joins&#34;&gt;&lt;strong&gt;Joins&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Joining data is a hallmark of geospatial analysis, and GEE provides several ways in which different datasets may be joined together based on a specified condition.  These conditions, or filters as they are called in GEE, can be spatial, tabular or temporal in nature.  GEE applies the conditional filter, and items in the input collections that match the conditions are saved in the output collection depending what output the join wants to keep.&lt;/p&gt;

&lt;h3 id=&#34;image-classification&#34;&gt;&lt;strong&gt;Image Classification&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;GEE has several image classification methods built into the API.  These include unsupervised and supervised classifiers.  As of the time of this writing, these include: Cart, Na√Øve Bayes and Continuous Na√Øve Bayes, Decision Tree, Gmo Linear Regression and Max Ent, Ikpamir, Minimum Distance, Pegasos linear, and Polynomial, and Gaussian, Perceptron, Random Forest, Spectral Region, Scm, and Winnow. Additionally, if provided with training data, a confusion matrix can be calculated from that classification to present an accuracy assessment.&lt;/p&gt;

&lt;h3 id=&#34;exporting-analyses&#34;&gt;&lt;strong&gt;Exporting analyses&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Although it is often more efficient to perform your desired analysis within GEE, exporting your results for further specialized analysis or publication can come in several forms depending on the desired purposes.  This might include CSV files of time series, images, web map tiles, and videos.  In addition, a suite of standard JavaScript User Interface (UI) items are available within the IDE which enables users to rapidly design and prototype user interfaces to include items such as combo and check boxes, sliders, and legend elements.  These powerful features allow users to publish advanced and fully fleshed out web applications so that those who don‚Äôt have a GEE account can interact with or export analysis without looking at a single line of code.&lt;/p&gt;

&lt;h3 id=&#34;example-analysis&#34;&gt;&lt;strong&gt;Example analysis&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s use GEE to perform one of the most common&lt;/p&gt;

&lt;p&gt;Example scripts
ExploringLandsatImagery
&lt;a href=&#34;https://code.earthengine.google.com/a32638380b40c7818f8fac0fb1955f61&#34;&gt;https://code.earthengine.google.com/a32638380b40c7818f8fac0fb1955f61&lt;/a&gt;
ExploringLandcoverChangeWithLandsatImagery
&lt;a href=&#34;https://code.earthengine.google.com/601497b431ec43b6c59fd8e3c1a287ff&#34;&gt;https://code.earthengine.google.com/601497b431ec43b6c59fd8e3c1a287ff&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;homework&#34;&gt;&lt;strong&gt;Homework&lt;/strong&gt;:&lt;/h3&gt;

&lt;p&gt;Exploring land cover/use change using Landsat 5 imagery available on GEE
Decide one of your favorite places
Select two images to show the changes
Share your exploration (script) here&lt;/p&gt;

&lt;h3 id=&#34;citations&#34;&gt;&lt;strong&gt;Citations&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gorelick, N., Hancher, M., Dixon, M., Ilyushchenko, S., Thau, D., &amp;amp; Moore, R. (2017). Google Earth Engine: Planetary-scale geospatial analysis for everyone. Remote Sensing Of Environment, 202, 18-27. doi: 10.1016/j.rse.2017.06.031&lt;/li&gt;
&lt;li&gt;Hansen, M. C., Potapov, P. V., Moore, R., Hancher, M., Turubanova, S. A., Tyukavina, A., ‚Ä¶ Townshend, J. R. G. (2013). High-Resolution Global Maps of 21st-Century Forest Cover Change. Science, 342(6160), 850‚Äì853. &lt;a href=&#34;https://doi.org/10.1126/science.1244693&#34;&gt;https://doi.org/10.1126/science.1244693&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coll, J. M. and Li, X. (2020). Google Earth Engine. The Geographic Information Science &amp;amp; Technology Body of Knowledge (1st Quarter 2020 Edition), John P. Wilson (ed.). DOI: 10.22224/gistbok/2020.1.9&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
